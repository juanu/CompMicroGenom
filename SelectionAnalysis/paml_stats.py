__author__ = 'Juan A. Ugalde'


def fdr(cluster_list, p_value_position):
    """
    This module takes the result list generated by the PAML analysis, and runs the FDR analysis based on the
    Benjamini approach at 5%.
    The output is a list of lists, with the corrected p-value added next to the original one.
    The calculations are based on this post:
    http://stats.stackexchange.com/questions/870/multiple-hypothesis-testing-correction-with-benjamini-hochberg-p-values-or-q-va
    """

    from operator import itemgetter
    import sys

    total_tests = len(cluster_list)  # Get the number of total tests performed
    position = 1  # Ranking position
    prev_adjusted_pvalue = 0  # Needed to keep track of the n-1 value in the analysis

    sorted_results = sorted(cluster_list, key=itemgetter(p_value_position))  # Sort the list by p-value

    #Go on each entry (which is itself a list) of the list of sorted results
    for entry in sorted_results:

        #check that the p-value is a number
        try:
            val = int(entry[p_value_position])
        except ValueError:
            print ("The position %d is not a pvalue" % p_value_position)
            sys.exit()

        #Perform the calculations of the p-value
        #New pvalue
        adjusted_pvalue = float(entry[p_value_position]) * (total_tests / position)

        #Check that the value is not greater than 1
        adjusted_pvalue = min(adjusted_pvalue, 1)

        #Check that the value is not greater than the previous one
        adjusted_pvalue = max(adjusted_pvalue, prev_adjusted_pvalue)

        prev_adjusted_pvalue = adjusted_pvalue
        position += 1

        entry.insert(p_value_position + 1, adjusted_pvalue)  # Insert the corrected p-value on the list

    return sorted_results


def lrt(H0, H1, df):
    """
    Perform the LRT test for the PAML results. Uses scipy to calculate the LRT pvalue, using
    the chi-square test
    """

    import math
    from scipy.stats import chi2

    LRT_value = 2 * math.fabs(H0 - H1)  # LRT test value
    pval = 1 - chi2.cdf(LRT_value, df)  # p-value based on chi-square

    return pval
